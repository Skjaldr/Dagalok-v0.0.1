// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused_imports)]
use spacetimedb_sdk::callbacks::{DbCallbacks, ReducerCallbacks};
use spacetimedb_sdk::client_api_messages::{Event, TableUpdate};
use spacetimedb_sdk::client_cache::{ClientCache, RowCallbackReminders};
use spacetimedb_sdk::global_connection::with_connection_mut;
use spacetimedb_sdk::identity::Credentials;
use spacetimedb_sdk::reducer::AnyReducerEvent;
use spacetimedb_sdk::spacetime_module::SpacetimeModule;
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};
use std::sync::Arc;

pub mod client;
pub mod create_player_reducer;
pub mod entity_component;
pub mod player_action;
pub mod player_component;
pub mod player_stances;
pub mod stdb_vector_3;
pub mod update_player_action_reducer;
pub mod update_player_position_reducer;
pub mod update_player_stance_reducer;

pub use client::*;
pub use create_player_reducer::*;
pub use entity_component::*;
pub use player_action::*;
pub use player_component::*;
pub use player_stances::*;
pub use stdb_vector_3::*;
pub use update_player_action_reducer::*;
pub use update_player_position_reducer::*;
pub use update_player_stance_reducer::*;

#[allow(unused)]
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum ReducerEvent {
    CreatePlayer(create_player_reducer::CreatePlayerArgs),
    UpdatePlayerAction(update_player_action_reducer::UpdatePlayerActionArgs),
    UpdatePlayerPosition(update_player_position_reducer::UpdatePlayerPositionArgs),
    UpdatePlayerStance(update_player_stance_reducer::UpdatePlayerStanceArgs),
}

#[allow(unused)]
pub struct Module;
impl SpacetimeModule for Module {
    fn handle_table_update(
        &self,
        table_update: TableUpdate,
        client_cache: &mut ClientCache,
        callbacks: &mut RowCallbackReminders,
    ) {
        let table_name = &table_update.table_name[..];
        match table_name {
            "Client" => client_cache
                .handle_table_update_with_primary_key::<client::Client>(callbacks, table_update),
            "EntityComponent" => client_cache
                .handle_table_update_with_primary_key::<entity_component::EntityComponent>(
                    callbacks,
                    table_update,
                ),
            "PlayerComponent" => client_cache
                .handle_table_update_with_primary_key::<player_component::PlayerComponent>(
                    callbacks,
                    table_update,
                ),
            _ => {
                spacetimedb_sdk::log::error!("TableRowOperation on unknown table {:?}", table_name)
            }
        }
    }
    fn invoke_row_callbacks(
        &self,
        reminders: &mut RowCallbackReminders,
        worker: &mut DbCallbacks,
        reducer_event: Option<Arc<AnyReducerEvent>>,
        state: &Arc<ClientCache>,
    ) {
        reminders.invoke_callbacks::<client::Client>(worker, &reducer_event, state);
        reminders.invoke_callbacks::<entity_component::EntityComponent>(
            worker,
            &reducer_event,
            state,
        );
        reminders.invoke_callbacks::<player_component::PlayerComponent>(
            worker,
            &reducer_event,
            state,
        );
    }
    fn handle_event(
        &self,
        event: Event,
        _reducer_callbacks: &mut ReducerCallbacks,
        _state: Arc<ClientCache>,
    ) -> Option<Arc<AnyReducerEvent>> {
        let Some(function_call) = &event.function_call else {
            spacetimedb_sdk::log::warn!("Received Event with None function_call");
            return None;
        };
        #[allow(clippy::match_single_binding)]
match &function_call.reducer[..] {
						"create_player" => _reducer_callbacks.handle_event_of_type::<create_player_reducer::CreatePlayerArgs, ReducerEvent>(event, _state, ReducerEvent::CreatePlayer),
			"update_player_action" => _reducer_callbacks.handle_event_of_type::<update_player_action_reducer::UpdatePlayerActionArgs, ReducerEvent>(event, _state, ReducerEvent::UpdatePlayerAction),
			"update_player_position" => _reducer_callbacks.handle_event_of_type::<update_player_position_reducer::UpdatePlayerPositionArgs, ReducerEvent>(event, _state, ReducerEvent::UpdatePlayerPosition),
			"update_player_stance" => _reducer_callbacks.handle_event_of_type::<update_player_stance_reducer::UpdatePlayerStanceArgs, ReducerEvent>(event, _state, ReducerEvent::UpdatePlayerStance),
			unknown => { spacetimedb_sdk::log::error!("Event on an unknown reducer: {:?}", unknown); None }
}
    }
    fn handle_resubscribe(
        &self,
        new_subs: TableUpdate,
        client_cache: &mut ClientCache,
        callbacks: &mut RowCallbackReminders,
    ) {
        let table_name = &new_subs.table_name[..];
        match table_name {
            "Client" => {
                client_cache.handle_resubscribe_for_type::<client::Client>(callbacks, new_subs)
            }
            "EntityComponent" => client_cache
                .handle_resubscribe_for_type::<entity_component::EntityComponent>(
                    callbacks, new_subs,
                ),
            "PlayerComponent" => client_cache
                .handle_resubscribe_for_type::<player_component::PlayerComponent>(
                    callbacks, new_subs,
                ),
            _ => {
                spacetimedb_sdk::log::error!("TableRowOperation on unknown table {:?}", table_name)
            }
        }
    }
}

/// Connect to a database named `db_name` accessible over the internet at the URI `spacetimedb_uri`.
///
/// If `credentials` are supplied, they will be passed to the new connection to
/// identify and authenticate the user. Otherwise, a set of `Credentials` will be
/// generated by the server.
pub fn connect<IntoUri>(
    spacetimedb_uri: IntoUri,
    db_name: &str,
    credentials: Option<Credentials>,
) -> Result<()>
where
    IntoUri: TryInto<spacetimedb_sdk::http::Uri>,
    <IntoUri as TryInto<spacetimedb_sdk::http::Uri>>::Error:
        std::error::Error + Send + Sync + 'static,
{
    with_connection_mut(|connection| {
        connection.connect(spacetimedb_uri, db_name, credentials, Arc::new(Module))?;
        Ok(())
    })
}
